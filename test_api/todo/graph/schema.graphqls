scalar Map

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  userId: String!
  user: User! @goField(forceResolver: true)
  createdAt: String!
  updatedAt: String!
  meta: Map! @goField(forceResolver: true)
  activityHistory: [Map!]! @goField(forceResolver: true)
}

type User {
  id: ID!
  name: String!
  email: String!
  username: String!
  todos: [Todo!]! @goField(forceResolver: true)
  todosCount: Int! @goField(forceResolver: true)
  createdAt: String!
  updatedAt: String!
  meta: MetaInfo! @goField(forceResolver: true)
  tags: [String!]! @goField(forceResolver: true)
  completionRate: Float! @goField(forceResolver: true)
  completionRateLast7Days: [Float!]! @goField(forceResolver: true)
  activityStreak7Days: [Int!]! @goField(forceResolver: true)
}

type MetaInfo {
  ipAddress: String
  userAgent: String
  createdEpoch: Int
}

type Query {
  allTodos: [Todo!]!
  todos(query: String, page: Int, perPage: Int): [Todo!]!
  users(query: String, page: Int, perPage: Int): [User!]!
  user(id: String!): User
  todo(id: String!): Todo
  healthy: Boolean!
  totalTodos: Int!
  activityStreak7Days: [Int!]!
  completionRateLast7Days: [Float!]!
  completionRate: Float!
  activityHistory: [Map!]!
  meta: Map!
}

input NewTodoParams {
  text: String!
  userId: String!
}

type Mutation {
  createTodo(params: NewTodoParams!): Todo!
  updateTodo(id: String!, text: String!): Todo!
  markAsDone(id: String!): Todo!
  markAsUndone(id: String!): Todo!
  deleteTodo(id: String!): Todo!
  createUser(name: String!, email: String!, username: String!): User!
  deleteUser(id: String!): User!
  updateUser(id: String!, name: String, email: String, username: String): User!
  deleteEverything: Boolean!
}
