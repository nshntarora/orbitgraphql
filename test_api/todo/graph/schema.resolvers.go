package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"graphql_cache/test_api/todo/db"
	"graphql_cache/test_api/todo/graph/model"
	"time"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, params model.NewTodoParams) (*db.Todo, error) {
	todo := db.Todo{
		ID:   uuid.New(),
		Text: params.Text,
		Done: false,
	}

	r.DB.CreateTodo(&todo)

	return &todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, text string) (*db.Todo, error) {
	err := r.DB.UpdateTodo(id, text)
	if err != nil {
		return nil, err
	}

	todo, err := r.DB.GetTodoByID(id)
	if err != nil {
		return nil, err
	}

	return &todo, nil
}

// MarkAsDone is the resolver for the markAsDone field.
func (r *mutationResolver) MarkAsDone(ctx context.Context, id string) (*db.Todo, error) {
	r.DB.UpdateTodoAsDone(id)
	todo, err := r.DB.GetTodoByID(id)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}

// MarkAsUndone is the resolver for the markAsUndone field.
func (r *mutationResolver) MarkAsUndone(ctx context.Context, id string) (*db.Todo, error) {
	r.DB.UpdateTodoAsDone(id)
	todo, err := r.DB.GetTodoByID(id)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*db.Todo, error) {
	todo, err := r.DB.GetTodoByID(id)
	if err != nil {
		return nil, err
	}

	r.DB.DeleteTodo(id)

	return &todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, username string) (*db.User, error) {
	user := db.User{
		ID:       uuid.New(),
		Name:     name,
		Email:    email,
		Username: username,
	}

	r.DB.CreateUser(&user)

	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*db.User, error) {
	user, err := r.DB.GetUserByID(id)
	if err != nil {
		return nil, err
	}

	r.DB.DeleteUser(id)

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string, username *string) (*db.User, error) {
	err := r.DB.UpdateUser(id, name, email, username)
	if err != nil {
		return nil, err
	}

	user, err := r.DB.GetUserByID(id)
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// DeleteEverything is the resolver for the deleteEverything field.
func (r *mutationResolver) DeleteEverything(ctx context.Context) (bool, error) {
	err := r.DB.DeleteEverything()
	if err != nil {
		return false, err
	}
	return true, nil
}

// AllTodos is the resolver for the allTodos field.
func (r *queryResolver) AllTodos(ctx context.Context) ([]db.Todo, error) {
	todos := []db.Todo{}
	err := r.DB.GetAllTodos(&todos)
	if err != nil {
		return nil, err
	}
	return todos, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, query *string, page *int, perPage *int) ([]db.Todo, error) {
	var todos []db.Todo

	r.DB.PaginateTodos(&todos, query, page, perPage)

	return todos, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, query *string, page *int, perPage *int) ([]db.User, error) {
	var users []db.User

	r.DB.PaginateUsers(&users, query, page, perPage)

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*db.User, error) {
	user, err := r.DB.GetUserByID(id)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*db.Todo, error) {
	todo, err := r.DB.GetTodoByID(id)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}

// ID is the resolver for the id field.
func (r *todoResolver) ID(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.ID.String(), nil
}

// UserID is the resolver for the userId field.
func (r *todoResolver) UserID(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *todoResolver) CreatedAt(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *todoResolver) UpdatedAt(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *db.User) (string, error) {
	return obj.ID.String(), nil
}

// Todos is the resolver for the todos field.
func (r *userResolver) Todos(ctx context.Context, obj *db.User) ([]db.Todo, error) {
	todos := []db.Todo{}
	r.DB.GetTodosByUserID(&todos, obj.ID.String())

	return todos, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *db.User) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *db.User) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
