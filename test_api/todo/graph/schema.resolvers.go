package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"graphql_cache/test_api/todo/db"
	"graphql_cache/test_api/todo/graph/model"
	"time"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, params model.NewTodoParams) (*db.Todo, error) {
	todo := db.Todo{
		ID:     uuid.New(),
		Text:   params.Text,
		Done:   false,
		UserID: uuid.MustParse(params.UserID),
	}

	err := r.DB.CreateTodo(&todo)

	return &todo, err
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, text string) (*db.Todo, error) {
	err := r.DB.UpdateTodo(id, text)
	if err != nil {
		return nil, err
	}

	todo := db.Todo{}
	err = r.DB.GetTodoByID(id, &todo)
	if err != nil || todo.ID == uuid.Nil {
		return nil, err
	}

	return &todo, nil
}

// MarkAsDone is the resolver for the markAsDone field.
func (r *mutationResolver) MarkAsDone(ctx context.Context, id string) (*db.Todo, error) {
	r.DB.UpdateTodoAsDone(id)
	todo := db.Todo{}
	err := r.DB.GetTodoByID(id, &todo)
	if err != nil || todo.ID == uuid.Nil {
		return nil, err
	}
	return &todo, nil
}

// MarkAsUndone is the resolver for the markAsUndone field.
func (r *mutationResolver) MarkAsUndone(ctx context.Context, id string) (*db.Todo, error) {
	r.DB.UpdateTodoAsDone(id)
	todo := db.Todo{}
	err := r.DB.GetTodoByID(id, &todo)
	if err != nil || todo.ID == uuid.Nil {
		return nil, err
	}
	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*db.Todo, error) {
	todo := db.Todo{}
	err := r.DB.GetTodoByID(id, &todo)
	if err != nil || todo.ID == uuid.Nil {
		return nil, err
	}

	r.DB.DeleteTodo(id)

	return &todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, username string) (*db.User, error) {
	user := db.User{
		ID:       uuid.New(),
		Name:     name,
		Email:    email,
		Username: username,
	}

	err := r.DB.CreateUser(&user)
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*db.User, error) {
	user := db.User{}
	err := r.DB.GetUserByID(id, &user)
	if err != nil || user.ID == uuid.Nil {
		return nil, err
	}

	r.DB.DeleteUser(id)

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string, username *string) (*db.User, error) {
	err := r.DB.UpdateUser(id, name, email, username)
	if err != nil {
		return nil, err
	}

	user := db.User{}
	err = r.DB.GetUserByID(id, &user)
	if err != nil || user.ID == uuid.Nil {
		return nil, err
	}

	return &user, nil
}

// DeleteEverything is the resolver for the deleteEverything field.
func (r *mutationResolver) DeleteEverything(ctx context.Context) (bool, error) {
	err := r.DB.DeleteEverything()
	if err != nil {
		return false, err
	}
	return true, nil
}

// AllTodos is the resolver for the allTodos field.
func (r *queryResolver) AllTodos(ctx context.Context) ([]db.Todo, error) {
	todos := []db.Todo{}
	err := r.DB.GetAllTodos(&todos)
	if err != nil {
		return nil, err
	}
	return todos, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, query *string, page *int, perPage *int) ([]db.Todo, error) {
	var todos []db.Todo

	r.DB.PaginateTodos(&todos, query, page, perPage)

	return todos, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, query *string, page *int, perPage *int) ([]db.User, error) {
	var users []db.User

	err := r.DB.PaginateUsers(&users, query, page, perPage)
	if err != nil {
		return nil, err
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*db.User, error) {
	user := db.User{}
	err := r.DB.GetUserByID(id, &user)
	if err != nil {
		return nil, err
	}
	if user.ID == uuid.Nil {
		return nil, errors.New("user not found")
	}
	return &user, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*db.Todo, error) {
	todo := db.Todo{}
	err := r.DB.GetTodoByID(id, &todo)
	if err != nil || todo.ID == uuid.Nil {
		return nil, err
	}
	return &todo, nil
}

// Healthy is the resolver for the healthy field.
func (r *queryResolver) Healthy(ctx context.Context) (bool, error) {
	return true, nil
}

// TotalTodos is the resolver for the totalTodos field.
func (r *queryResolver) TotalTodos(ctx context.Context) (int, error) {
	return r.DB.GetTotalTodos(), nil
}

// ActivityStreak7Days is the resolver for the activityStreak7Days field.
func (r *queryResolver) ActivityStreak7Days(ctx context.Context) ([]int, error) {
	return r.DB.GetSystemActivityHistoryForLast7Days()
}

// CompletionRateLast7Days is the resolver for the completionRateLast7Days field.
func (r *queryResolver) CompletionRateLast7Days(ctx context.Context) ([]float64, error) {
	return r.DB.GetSystemCompletionRateForLast7Days()
}

// CompletionRate is the resolver for the completionRate field.
func (r *queryResolver) CompletionRate(ctx context.Context) (float64, error) {
	return r.DB.GetSystemCompletionRate()
}

// ActivityHistory is the resolver for the activityHistory field.
func (r *queryResolver) ActivityHistory(ctx context.Context) ([]map[string]interface{}, error) {
	todos := []db.Todo{}
	err := r.DB.GetAllTodos(&todos)
	if err != nil {
		return nil, err
	}

	activityHistory := []map[string]interface{}{}
	for _, todo := range todos {
		activityHistory = append(activityHistory, map[string]interface{}{
			"type":      "created",
			"user_id":   todo.UserID.String(),
			"timestamp": todo.CreatedAt.Unix(),
		})
	}

	return activityHistory, nil
}

// Meta is the resolver for the meta field.
func (r *queryResolver) Meta(ctx context.Context) (map[string]interface{}, error) {
	return map[string]interface{}{"version": "1.0.0"}, nil
}

// ID is the resolver for the id field.
func (r *todoResolver) ID(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.ID.String(), nil
}

// UserID is the resolver for the userId field.
func (r *todoResolver) UserID(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.ID.String(), nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *db.Todo) (*db.User, error) {
	user := db.User{}
	err := r.DB.GetUserByID(obj.UserID.String(), &user)
	if err != nil {
		return nil, err
	}
	if user.ID == uuid.Nil {
		return nil, errors.New("user not found")
	}
	return &user, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *todoResolver) CreatedAt(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *todoResolver) UpdatedAt(ctx context.Context, obj *db.Todo) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// Meta is the resolver for the meta field.
func (r *todoResolver) Meta(ctx context.Context, obj *db.Todo) (map[string]interface{}, error) {
	createdAtUnix := int(obj.CreatedAt.Unix())

	userAgent := ""
	if ctx.Value("user-agent") != nil {
		userAgent = ctx.Value("user-agent").(string)
	}

	ipAddress := ""
	if ctx.Value("ip-address") != nil {
		ipAddress = ctx.Value("ip-address").(string)
	}

	return map[string]interface{}{
		"ipAddress":    ipAddress,
		"userAgent":    userAgent,
		"createdEpoch": createdAtUnix,
	}, nil
}

// ActivityHistory is the resolver for the activityHistory field.
func (r *todoResolver) ActivityHistory(ctx context.Context, obj *db.Todo) ([]map[string]interface{}, error) {
	return []map[string]interface{}{
		{
			"type":      "created",
			"user_id":   obj.UserID.String(),
			"timestamp": obj.CreatedAt.Unix(),
		},
	}, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *db.User) (string, error) {
	return obj.ID.String(), nil
}

// Todos is the resolver for the todos field.
func (r *userResolver) Todos(ctx context.Context, obj *db.User) ([]db.Todo, error) {
	todos := []db.Todo{}
	r.DB.GetTodosByUserID(&todos, obj.ID.String())

	return todos, nil
}

// TodosCount is the resolver for the todosCount field.
func (r *userResolver) TodosCount(ctx context.Context, obj *db.User) (int, error) {
	return r.DB.GetTodosCountByUser(obj)
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *db.User) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *db.User) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// Meta is the resolver for the meta field.
func (r *userResolver) Meta(ctx context.Context, obj *db.User) (*model.MetaInfo, error) {
	createdAtUnix := int(obj.CreatedAt.Unix())

	userAgent := ""
	if ctx.Value("user-agent") != nil {
		userAgent = ctx.Value("user-agent").(string)
	}

	ipAddress := ""
	if ctx.Value("ip-address") != nil {
		ipAddress = ctx.Value("ip-address").(string)
	}

	return &model.MetaInfo{
		IPAddress:    &ipAddress,
		UserAgent:    &userAgent,
		CreatedEpoch: &createdAtUnix,
	}, nil
}

// Tags is the resolver for the tags field.
func (r *userResolver) Tags(ctx context.Context, obj *db.User) ([]string, error) {
	tags := []string{"user", obj.CreatedAt.Month().String(), obj.CreatedAt.Weekday().String()}

	return tags, nil
}

// CompletionRate is the resolver for the completionRate field.
func (r *userResolver) CompletionRate(ctx context.Context, obj *db.User) (float64, error) {
	return r.DB.GetCompletionRateForUser(obj)
}

// CompletionRateLast7Days is the resolver for the completionRateLast7Days field.
func (r *userResolver) CompletionRateLast7Days(ctx context.Context, obj *db.User) ([]float64, error) {
	return r.DB.GetCompletionRateForLast7Days(obj)
}

// ActivityStreak7Days is the resolver for the activityStreak7Days field.
func (r *userResolver) ActivityStreak7Days(ctx context.Context, obj *db.User) ([]int, error) {
	return r.DB.GetActivityHistoryForLast7Days(obj)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
